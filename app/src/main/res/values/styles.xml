<resources>

    <!-- NOTE: https://github.com/material-components/material-components-android/blob/master/docs/getting-started.md
     "Using a Material Components theme enables a custom view inflater which replaces default
      components with their Material counterparts. Currently, this only replaces
      <Button> and <AutoCompleteTextView> XML components with <MaterialButton> and
      <MaterialAutoCompleteTextView>, respectively" -->

    <!-- NOTE: https://material.io/blog/migrate-android-material-components
    "Like AppCompat, MDC will replace some framework widgets with MDC equivalents at inflation time.
     This makes it possible to ship new features and bugfixes without having to swap all your
      declarations for a new type."
    -->

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.MaterialComponents.Light.DarkActionBar">
        <!-- Used especially for tinting the system status bar, not part of Material Color Theme
        See: https://github.com/material-components/material-components-android/issues/468
        -->
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>

        <!-- Material theming -->
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorSecondary">@color/colorAccent</item>
        <item name="colorOnSecondary">@android:color/white</item>

        <!-- This is a more fine-grained approach to styling buttons than
        using `shapeAppearanceSmallComponent` -->
        <item name="materialButtonStyle">@style/CustomButton</item>
    </style>

    <style name="RoundCorner">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">50%</item>
    </style>

    <style name="CustomButton" parent="Widget.MaterialComponents.Button">
        <item name="shapeAppearanceOverlay">@style/RoundCorner</item>
    </style>

</resources>
